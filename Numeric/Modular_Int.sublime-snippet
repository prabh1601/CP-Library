<snippet>
  <content><![CDATA[
template <typename T> T inverse(T a, T m) {
    T u = 0, v = 1;
    while (a != 0) {
        T t = m / a;
        m -= t * a;
        swap(a, m);
        u -= t * v;
        swap(u, v);
    }
    assert(m == 1);
    return u;
}

template <typename T> class Modnum {
   public:
    using Type = typename decay<decltype(T::value)>::type;

    constexpr Modnum() : value() {}
    template <typename U> Modnum(const U& x) { value = normalize(x); }

    template <typename U> static Type normalize(const U& x) {
        Type v;
        if (-mod() <= x && x < mod())
            v = static_cast<Type>(x);
        else
            v = static_cast<Type>(x % mod());
        if (v < 0) v += mod();
        return v;
    }

    const Type& operator()() const { return value; }
    template <typename U> explicit operator U() const { return static_cast<U>(value); }
    constexpr static Type mod() { return T::value; }

    Modnum& operator+=(const Modnum& other) {
        if ((value += other.value) >= mod()) value -= mod();
        return *this;
    }
    Modnum& operator-=(const Modnum& other) {
        if ((value -= other.value) < 0) value += mod();
        return *this;
    }
    template <typename U> Modnum& operator+=(const U& other) { return *this += Modnum(other); }
    template <typename U> Modnum& operator-=(const U& other) { return *this -= Modnum(other); }
    Modnum& operator++() { return *this += 1; \}
    Modnum& operator--() { return *this -= 1; \}
    Modnum operator++(int32_t) {
        Modnum result(*this);
        *this += 1;
        return result;
    }
    Modnum operator--(int32_t) {
        Modnum result(*this);
        *this -= 1;
        return result;
    }
    Modnum operator-() const { return Modnum(-value); \}

    template <typename U = T>
    typename enable_if<is_same<typename Modnum<U>::Type, int>::value, Modnum>::type& operator*=(
        const Modnum& rhs) {
#ifdef _WIN32
        uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);
        uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;
        asm("divl %4; \n\t" : "=a"(d), "=d"(m) : "d"(xh), "a"(xl), "r"(mod()));
        value = m;
#else
        value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));
#endif
        return *this;
    }
    template <typename U = T>
    typename enable_if<is_same<typename Modnum<U>::Type, int64_t>::value, Modnum>::type& operator*=(
        const Modnum& rhs) {
        int64_t q = static_cast<int64_t>(static_cast<long double>(value) * rhs.value / mod());
        value = normalize(value * rhs.value - q * mod());
        return *this;
    }
    template <typename U = T>
    typename enable_if<!is_integral<typename Modnum<U>::Type>::value, Modnum>::type& operator*=(
        const Modnum& rhs) {
        value = normalize(value * rhs.value);
        return *this;
    }

    Modnum& operator/=(const Modnum& other) { return *this *= Modnum(inverse(other.value, mod())); }

    template <typename U> friend bool operator==(const Modnum<U>& lhs, const Modnum<U>& rhs);

    template <typename U> friend bool operator<(const Modnum<U>& lhs, const Modnum<U>& rhs);

    template <typename U> friend std::istream& operator>>(std::istream& stream, Modnum<U>& number);

   private:
    Type value;
};

template <typename T> bool operator==(const Modnum<T>& lhs, const Modnum<T>& rhs) {
    return lhs.value == rhs.value;
}
template <typename T, typename U> bool operator==(const Modnum<T>& lhs, U rhs) {
    return lhs == Modnum<T>(rhs);
}
template <typename T, typename U> bool operator==(U lhs, const Modnum<T>& rhs) {
    return Modnum<T>(lhs) == rhs;
}

template <typename T> bool operator!=(const Modnum<T>& lhs, const Modnum<T>& rhs) { return !(lhs == rhs); }
template <typename T, typename U> bool operator!=(const Modnum<T>& lhs, U rhs) { return !(lhs == rhs); }
template <typename T, typename U> bool operator!=(U lhs, const Modnum<T>& rhs) { return !(lhs == rhs); }

template <typename T> bool operator<(const Modnum<T>& lhs, const Modnum<T>& rhs) {
    return lhs.value < rhs.value;
}

template <typename T> Modnum<T> operator+(const Modnum<T>& lhs, const Modnum<T>& rhs) {
    return Modnum<T>(lhs) += rhs;
}
template <typename T, typename U> Modnum<T> operator+(const Modnum<T>& lhs, U rhs) {
    return Modnum<T>(lhs) += rhs;
}
template <typename T, typename U> Modnum<T> operator+(U lhs, const Modnum<T>& rhs) {
    return Modnum<T>(lhs) += rhs;
}

template <typename T> Modnum<T> operator-(const Modnum<T>& lhs, const Modnum<T>& rhs) {
    return Modnum<T>(lhs) -= rhs;
}
template <typename T, typename U> Modnum<T> operator-(const Modnum<T>& lhs, U rhs) {
    return Modnum<T>(lhs) -= rhs;
}
template <typename T, typename U> Modnum<T> operator-(U lhs, const Modnum<T>& rhs) {
    return Modnum<T>(lhs) -= rhs;
}

template <typename T> Modnum<T> operator*(const Modnum<T>& lhs, const Modnum<T>& rhs) {
    return Modnum<T>(lhs) *= rhs;
}
template <typename T, typename U> Modnum<T> operator*(const Modnum<T>& lhs, U rhs) {
    return Modnum<T>(lhs) *= rhs;
}
template <typename T, typename U> Modnum<T> operator*(U lhs, const Modnum<T>& rhs) {
    return Modnum<T>(lhs) *= rhs;
}
template <typename T> Modnum<T> operator/(const Modnum<T>& lhs, const Modnum<T>& rhs) {
    return Modnum<T>(lhs) /= rhs;
}
template <typename T, typename U> Modnum<T> operator/(const Modnum<T>& lhs, U rhs) {
    return Modnum<T>(lhs) /= rhs;
}
template <typename T, typename U> Modnum<T> operator/(U lhs, const Modnum<T>& rhs) {
    return Modnum<T>(lhs) /= rhs;
}

template <typename T, typename U> Modnum<T> power(const Modnum<T>& a, const U& b) {
    assert(b >= 0);
    Modnum<T> x = a, res = 1;
    U p = b;
    while (p > 0) {
        if (p & 1) res *= x;
        x *= x;
        p >>= 1;
    }
    return res;
}

template <typename T> std::ostream& operator<<(std::ostream& stream, const Modnum<T>& number) {
    return stream << number();
}

template <typename T> std::istream& operator>>(std::istream& stream, Modnum<T>& number) {
    typename common_type<typename Modnum<T>::Type, int64_t>::type x;
    stream >> x;
    number.value = Modnum<T>::normalize(x);
    return stream;
}

/*
using ModType = int32_t;
struct VarMod {
   static ModType value;
};
ModType VarMod::value;
ModType& md = VarMod::value;
using mint = Modnum<VarMod>;
*/

constexpr int md = 1e9 + 7;
using mint = Modnum<std::integral_constant<decay<decltype(md)>::type, md>>;

string to_String(mint x) { return to_String((int)x); }

${1:}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>__lib:Modnum</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>
</snippet>
