<snippet>
    <content><![CDATA[
template <typename T, typename F = function<T(const T &, const T &)>> struct sparse_table {
    int n, L;
    vector<vector<T>> data;
    F merge;  // should be idempotent

    // initializing the values
    sparse_table(int _n, const F &_merge) : n(_n), merge(_merge) {
        L = 32 - __builtin_clz(n);
        data.resize(L);
        data[0].resize(n);
    }

    // building the table in O(nlogn)
    template <typename Function> void init(const Function &initialize) {
        for (int i = 0; i < n; i++) data[0][i] = initialize(i);

        for (int l = 1; l < L; l++) {
            data[l].resize(n + 1 - (1 << l));
            for (int i = 0; i + (1 << l) <= n; i++) {
                data[l][i] = merge(data[l - 1][i], data[l - 1][i + (1 << (l - 1))]);
            }
        }
    }

    // query to [L,R) in O(1)
    T query(int start, int end) {
        assert(0 <= start and start < end and end <= n);
        int l = 31 - __builtin_clz(end - start);
        T ans = merge(data[l][start], data[l][end - (1 << l)]);
        return ans;
    }
};

${1:}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <!-- <tabTrigger>__lib:sparse_table</tabTrigger> -->
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
